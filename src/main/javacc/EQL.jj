/*
 * Copyright 2003 - 2014 The eFaps Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */options{  JDK_VERSION = "1.7";  STATIC = false;  ERROR_REPORTING = true;  USER_TOKEN_MANAGER = false;
  UNICODE_INPUT = true;}PARSER_BEGIN(EQLParser)package org.efaps.eql;
import java.util.List;
import java.util.ArrayList;import org.efaps.eql.IStatement.StmtType;
import org.efaps.eql.IStatement;
public class EQLParser{
    private String getString(final String _token)
    {
        return _token.replaceAll("\"", "");
    }}PARSER_END(EQLParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{    < QUERY : "query" > : QUERY_STATE
|   < PRINT : "print" > : PRINT_STATE
|   < EXEC  : "exec" ("ute")? > : EXEC_STATE
|   < WHERE : "where" > : WHERE_STATE
|   < SELECT : "select" > : SELECT_STATE}/************ query */< QUERY_STATE >SKIP :{    " "|   "\r"|   "\t"|   "\n"}< QUERY_STATE >TOKEN :{        < TYPE : "type" > : TYPE_STATE
}/************ type */< TYPE_STATE >SKIP :{    " "|   "\r"|   "\t"|   "\n"}< TYPE_STATE >TOKEN :{        < ENDTYPE : "select" > : SELECT_STATE
    |   < ENDTYPE2 : "where" > : WHERE_STATE
    |   < NAME : ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])+ >
    |   < SEPTYPE : "," >
}

/************ exec state */
< EXEC_STATE >
SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

< EXEC_STATE >TOKEN :{    < SEPEXEC : "," >|   < ENDEXEC : "select" > : EXECMAP_STATE
|   < NUMBEREXEC : (< DIGITEXEC >)+ >
|   < CLASSNAME : ([ "a"-"z", "A"-"Z", ".", "0"-"9" ])+ >|   < PARAEXEC :        (            < APOSTROPHEEXEC >            (                < CHAREXEC >            |   " "            )+            < APOSTROPHEEXEC >        ) >|   < #APOSTROPHEEXEC : "\"" >
|   < #CHAREXEC : (~["\""])+ >
|   < #DIGITEXEC : ["\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"] >
}

/************ exec state */
< EXECMAP_STATE >
SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

< EXECMAP_STATE >
TOKEN :
{
    < ASEXECMAP : "as">
|   < SEPEXECMAP : "," >
|   < NUMBEREXECMAP : (< DIGITEXECMAP >)+ >
|   < KEYEXECMAP : ([ "a"-"z", "A"-"Z"])+ >
|   < #DIGITEXECMAP : ["\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"] >
}

/************ print */
< PRINT_STATE >
SKIP :{    " "|   "\r"|   "\t"|   "\n"}

< PRINT_STATE >
TOKEN :
{
        < ENDPRINT : "select" > : SELECT_STATE
    |   < OID : (< DIGITS >)+ "." (< DIGITS >)+ >
    |   < #DIGITS: [
            "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"
        ] >
}


/************ select */
< SELECT_STATE >SKIP :{    " "|   "\r"|   "\t"|   "\n"}

< SELECT_STATE >TOKEN :{    < AS : "as" >|   < SEPSELECT : "," >|   < ALIAS : ([ "a"-"z", "A"-"Z" ])+ >|   < ONESEL :        (            (< SELSTMT >)+            (                < SELKARETOPEN >                (                    < SELSTRING >                |   < SELSTMT >                |   < SELDIGIT >                |   ","                )+                < SELKARETCLOSE >            )*            (< SELSTMT >)*        )* >
|   < #SELSTRING :        (            < SELAPOSTROPHE >            (                < SELCHAR >            |   " "            )+            < SELAPOSTROPHE >        ) >|   < #SELAPOSTROPHE : "\"" >
|   < #SELKARETOPEN: "[" >
|   < #SELKARETCLOSE: "]" >|   < #SELCHAR : (~[ "\"" ])+ >
|   < #SELSTMT : ([ "a"-"z", "A"-"Z", ".", "_", "#" ])+ >
|   < #SELDIGIT : [
            "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"] >
}


/************ esjp for query */
< ESJP_STATE >
SKIP :
{
    " "
|   "\r"
|   "\t"
|   "\n"
}

< ESJP_STATE >
TOKEN :
{
        < CLASS :([ "a"-"z", "A"-"Z", ".", "0"-"9" ])+ > : SELECT_STATE
}



< WHERE_STATE >
SKIP :{    " "|   "\r"|   "\t"|   "\n"}

< WHERE_STATE >
TOKEN :{    < ENDWHERE : "select" > : SELECT_STATE|   < AND : "and" >|   < IN : "in" >|   < ATTR : ([ "a"-"z", "A"-"Z", "_" ])+ >|   < WSEL : ([ "a"-"z", "A"-"Z", "_", ".", "[", "]" ])+ >|   < EQUAL : "==" >|   < GREATER : ">" >|   < LESS : "<" >|   < LPAREN : "(" >|   < RPAREN : ")" >|   < COMMA : "," >|   < NUMBER : (< DIGIT >)+ >|   < WOID : (< DIGITS >)+ "." (< DIGITS >)+ >|   < STRING :        (            < APOSTROPHE >            (                < CHAR >            |   " "            )+            < APOSTROPHE >        ) >|   < #APOSTROPHE : "\"" >|   < #CHAR : (~["\""])+ >
|   < #DIGIT : [
            "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"] >
}
/**
 *
 */void parseStatement(final IStatement _statement) :{    Token name, alias, oid, esjp;}{    (        < QUERY >        {            _statement.setStmtType(StmtType.QUERY);        }        (            < TYPE >            (                name = < NAME >                {                    _statement.addType(name.image);                }            |   < ENDTYPE >            |   < ENDTYPE2 >            |   < SEPTYPE >            |   < ENDWHERE >            |   whereRule(_statement)            |   < AND >            |   selectRule(_statement)            )*        )    |   < PRINT >        {            _statement.setStmtType(StmtType.PRINT);        }        (            oid = < OID >            {                _statement.setObject(oid.image);            }        |   < ENDPRINT >        |   selectRule(_statement)        )*    |   < SELECT >        (            selectRule(_statement)        )*    |   < EXEC >        {            _statement.setStmtType(StmtType.ESJP);        }        (            execRule(_statement)        )    )}


private void execRule(final IStatement _statement) :{    Token esjp;}{    LOOKAHEAD(2)    esjp = < CLASSNAME > < EOF >    {        _statement.setEsjp(esjp.image);    }|    esjp = < CLASSNAME >    {        _statement.setEsjp(esjp.image);    }    (        parameterRule(_statement)    |   < ENDEXEC >        (            mappingRule(_statement)        )*
    )*}

private void mappingRule(final IStatement _statement) :{    Token num, alias;}{    LOOKAHEAD(3)    num = < NUMBEREXECMAP > < ASEXECMAP > alias = < KEYEXECMAP >    {        _statement.addSelect(num.image, alias.image);    }|   < SEPEXECMAP >
}


private void parameterRule(final IStatement _statement) :{    Token para;}{    para = < NUMBEREXEC >    {        _statement.addParameter(para.image);    }|   para = < PARAEXEC >    {        _statement.addParameter(getString(para.image));    }|   < SEPEXEC >}



private void whereRule(final IStatement _statement) :{    Token attr, select;}{    attr = < ATTR >    (        whereEqRule(_statement, attr)    |   whereGreaterRule(_statement, attr)    |   whereLessRule(_statement, attr)    |   whereInRule(_statement, attr)    )|   select = < WSEL >    (        whereSelEqRule(_statement, select)    |   whereSelGreaterRule(_statement, select)    |   whereSelLessRule(_statement, select)    |   whereSelInRule(_statement, select)    )}private void whereInRule(final IStatement _statement, final Token _attr) :{    List < String > values;}{    < IN > < LPAREN > values = valueList(_statement)    {        _statement.addWhereAttrIn(_attr.image, values);    }    < RPAREN >}

private void whereSelInRule(final IStatement _statement, final Token _select) :
{
    List < String > values;
}
{
    < IN > < LPAREN > values = valueList(_statement)
    {
        _statement.addWhereSelectIn(_select.image, values);
    }
    < RPAREN >
}

private List < String > valueList(final IStatement _statement) :{    List < String > ret = new ArrayList < String > ();    Token aVal;}{    (        (            aVal = < NUMBER >        |   aVal = < WOID >        )        {            ret.add(aVal.image);        }    |   aVal = < STRING >        {            ret.add(getString(aVal.image));        }    |   < COMMA >    )*    {        return ret;    }}private void whereGreaterRule(final IStatement _statement, final Token _attr) :{    Token value;}{    LOOKAHEAD(2)    < GREATER > value = < STRING >    {        _statement.addWhereAttrGreater(_attr.image, getString(value.image));    }|   < GREATER > value = < NUMBER >    {        _statement.addWhereAttrGreater(_attr.image, value.image);    }}

private void whereSelGreaterRule(final IStatement _statement, final Token _select) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    < GREATER > value = < STRING >
    {
        _statement.addWhereSelectGreater(_select.image, getString(value.image));
    }
|   < GREATER > value = < NUMBER >
    {
        _statement.addWhereSelectGreater(_select.image, value.image);
    }
}

private void whereLessRule(final IStatement _statement, final Token _attr) :{    Token value;}{    LOOKAHEAD(2)    < LESS > value = < STRING >    {        _statement.addWhereAttrLess(_attr.image, getString(value.image));    }|   < LESS > value = < NUMBER >    {        _statement.addWhereAttrLess(_attr.image, value.image);    }}

private void whereSelLessRule(final IStatement _statement, final Token _select) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    < LESS > value = < STRING >
    {
        _statement.addWhereSelectLess(_select.image, getString(value.image));
    }
|   < LESS > value = < NUMBER >
    {
        _statement.addWhereSelectLess(_select.image, value.image);
    }
}

private void whereEqRule(final IStatement _statement, final Token _attr) :{    Token value;}{    LOOKAHEAD(2)    < EQUAL > value = < STRING >    {        _statement.addWhereAttrEq(_attr.image, getString(value.image));    }|   < EQUAL >    (        value = < NUMBER >    |   value = < WOID >    )    {        _statement.addWhereAttrEq(_attr.image, value.image);    }}

private void whereSelEqRule(final IStatement _statement, final Token _select) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    < EQUAL > value = < STRING >
    {
        _statement.addWhereSelectEq(_select.image, getString(value.image));
    }
|   < EQUAL >
    (
        value = < NUMBER >
    |   value = < WOID >
    )
    {
        _statement.addWhereSelectEq(_select.image, value.image);
    }
}


private void selectRule(final IStatement _statement) :{    Token onesel, clazz;}{    onesel = < ONESEL >    (        selectWithAliasRule(_statement, onesel)    |   selectsRule(_statement, onesel)    |   lastSelectRule(_statement, onesel)    )}




private void selectWithAliasRule(final IStatement _statement, final Token _onesel) :{    Token alias;}{    LOOKAHEAD(3)    < AS > alias = < ALIAS > < SEPSELECT >    {        _statement.addSelect(_onesel.image, alias.image);    }|   < AS > alias = < ALIAS >    {        _statement.addSelect(_onesel.image, alias.image);    }}private void selectsRule(final IStatement _statement, final Token _onesel) :{}{    < SEPSELECT >    {        _statement.addSelect(_onesel.image);    }}private void lastSelectRule(final IStatement _statement, final Token _onesel) :{}{    < EOF >    {        _statement.addSelect(_onesel.image);    }}

