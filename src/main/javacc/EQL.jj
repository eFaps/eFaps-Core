/*
 * Copyright 2003 - 2014 The eFaps Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */options{  JDK_VERSION = "1.7";  STATIC = false;  ERROR_REPORTING = true;  USER_TOKEN_MANAGER = false;
  UNICODE_INPUT = true;}PARSER_BEGIN(EQLParser)package org.efaps.eql;
import org.efaps.eql.IStatement;import org.efaps.eql.IStatement.StmtType;
public class EQLParser{
    private String getString(final String _token)
    {
        return _token.replaceAll("\"", "");
    }}PARSER_END(EQLParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{    < QUERY : "query" > : QUERY_STATE
|   < PRINT : "print" > : PRINT_STATE
|   < WHERE : "where" > : WHERE_STATE
|   < SELECT : "select" > : SELECT_STATE}/************ query */< QUERY_STATE >SKIP :{  " "| "\r"| "\t"| "\n"}< QUERY_STATE >TOKEN :{        < TYPE : "type" > : TYPE_STATE
    |   < ESJP : "esjp" > : ESJP_STATE}/************ type */< TYPE_STATE >SKIP :{  " "
| "\r"| "\t"| "\n"}< TYPE_STATE >TOKEN :{        < ENDTYPE : "select" > : SELECT_STATE
    |   < ENDTYPE2 : "where" > : WHERE_STATE
    |   < NAME : ([ "a"-"z", "A"-"Z", "_" ])+ >
    |   < SEPTYPE : "," >
}

/************ esjp for query */
< ESJP_STATE >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

< ESJP_STATE >
TOKEN :
{
        < CLASS :([ "a"-"z", "A"-"Z", "." ])+ >
}


/************ print */
< PRINT_STATE >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

< PRINT_STATE >
TOKEN :
{
        < ENDPRINT : "select" > : SELECT_STATE
    |   < OID : (< DIGITS >)+ "." (< DIGITS >)+ >
    |   < #DIGITS: [
            "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"
        ] >
}


/************ select */
< SELECT_STATE >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

< SELECT_STATE >
TOKEN :
{
        < AS : "as" >
    |   < ALIAS : ([ "a"-"z", "A"-"Z"])+ >
    |   < ONESEL : ([ "a"-"z", "A"-"Z","[","]",".", "_" ])+ >
    |   < SEPSELECT : "," >
}

< WHERE_STATE >
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

< WHERE_STATE >
TOKEN :
{
        < ENDWHERE : "select" > : SELECT_STATE
    |   < AND : "and" >
    |   < ATTR : ([ "a"-"z", "A"-"Z", "_" ])+ >
    |   < EQUAL : "=" >
    |   < GREATER : ">" >
    |   < LESS : "<" >
    |   < NUMBER: (< DIGIT >)+ >
    |   < STRING: (< APOSTROPHE > (< CHAR > | " ")+ < APOSTROPHE >)>
    |   < #APOSTROPHE: "\"">
    |   < #CHAR: ~["\u0000" - "\u0020", "\""]>
    |   < #DIGIT: [
            "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
            "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
            "\uff10"-"\uff19"
        ] >
}
/**
 *
 */void parseStatement(final IStatement _statement) :{  Token name, alias, oid, esjp;}{
  (
    < QUERY >
    {
          _statement.setStmtType(StmtType.QUERY);    }
    (
            < TYPE >
        (
            name = < NAME >
            {
                _statement.addType(name.image);
            }
            |   < ENDTYPE >
            |   < ENDTYPE2 >
            |   < SEPTYPE >
            |   < ENDWHERE >
            |   whereRule(_statement)
            |   < AND >
            |   selectRule(_statement)
        )*
        |   < ESJP >
            esjp = < CLASS >
            {
                _statement.setEsjp(esjp.image);            }
        )
  | < PRINT >
    {
          _statement.setStmtType(StmtType.PRINT);
    }
    (
            oid = < OID >
            {
                _statement.setObject(oid.image);            }
        |   < ENDPRINT >
        |   selectRule(_statement)
    )*
  | < SELECT >
    (
      selectRule(_statement)    )*  )
}

private void whereRule(final IStatement _statement) :
{
    Token attr;
}
{
    attr = <ATTR> (
                    whereEqRule(_statement, attr)
                |   whereGreaterRule(_statement, attr)
                |   whereLessRule(_statement, attr))
}

private void whereGreaterRule(final IStatement _statement,
                              final Token _attr) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    < GREATER > value = <STRING >
    {
      _statement.addWhereAttrGreater(_attr.image, getString(value.image));
    }
  | < GREATER > value = <NUMBER >
    {
      _statement.addWhereAttrGreater(_attr.image, value.image);
    }
}

private void whereLessRule(final IStatement _statement,
                           final Token _attr) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    < LESS > value = <STRING >
    {
      _statement.addWhereAttrLess(_attr.image, getString(value.image));
    }
  | < LESS > value = <NUMBER >
    {
      _statement.addWhereAttrLess(_attr.image, value.image);
    }
}



private void whereEqRule(final IStatement _statement,
                         final Token _attr) :
{
    Token value;
}
{
    LOOKAHEAD(2)
    <EQUAL > value = <STRING >
    {
      _statement.addWhereAttrEq(_attr.image, getString(value.image));
    }
  | <EQUAL > value = <NUMBER >
    {
      _statement.addWhereAttrEq(_attr.image, value.image);
    }
}

private void selectRule(final IStatement _statement) :
{
    Token onesel;
}
{
    onesel = <ONESEL> (
            selectWithAliasRule(_statement, onesel)
      |     selectsRule(_statement, onesel)
      |     lastSelectRule(_statement, onesel))
}

private void selectWithAliasRule(final IStatement _statement,
                                 final Token _onesel) :
{
    Token alias;
}
{
    LOOKAHEAD(3)
    < AS > alias = <ALIAS > < SEPSELECT >
    {
        _statement.addSelect(_onesel.image, alias.image);
    }
  |  < AS > alias = <ALIAS >
    {
        _statement.addSelect(_onesel.image, alias.image);
    }
}

private void selectsRule(final IStatement _statement,
                         final Token _onesel) :
{
}
{
    < SEPSELECT >
    {        _statement.addSelect(_onesel.image);
    }
}

private void lastSelectRule(final IStatement _statement,
                            final Token _onesel) :
{
}
{
    < EOF >
    {
        _statement.addSelect(_onesel.image);
    }
}




